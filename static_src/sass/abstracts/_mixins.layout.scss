/* ============================================
    Clearfix
*/

@mixin clearfix {
    &::after {
        clear: both;
        display: table;
        content: '';
    }
}

/* ============================================
    Default streamfield block spacing
*/

@mixin margin-streamfield-block {
    margin-top: $gutter-large;
    margin-bottom: $gutter-large;

    @include media-query(tablet-portrait) {
        margin-top: $gutter-xxl;
        margin-bottom: $gutter-xxl;
    }
}

/* ============================================
    Default section padding for page types of sections (e.g. section--main)
*/

@mixin page-padding--horizontal($location) {
    padding-#{$location}: $page-padding-horizontal-base;

    @include media-query(mob-landscape) {
        padding-#{$location}: $page-padding-horizontal-mob-landscape;
    }

    @include media-query(tablet-portrait) {
        padding-#{$location}: $page-padding-horizontal-tablet-portrait;
    }

    @include media-query(tablet-landscape) {
        padding-#{$location}: $page-padding-horizontal-tablet-landscape;
    }
}

@mixin page-padding--vertical($location) {
    padding-#{$location}: $page-padding-vertical-base;

    @include media-query(mob-landscape) {
        padding-#{$location}: $page-padding-vertical-mob-landscape;
    }

    @include media-query(tablet-portrait) {
        padding-#{$location}: $page-padding-vertical-tablet-portrait;
    }

    @include media-query(tablet-landscape) {
        padding-#{$location}: $page-padding-vertical-tablet-landscape;
    }
}

@mixin page-child-negative-margin--horizontal($location) {
    margin-#{$location}: -$page-padding-horizontal-base;

    @include media-query(mob-landscape) {
        margin-#{$location}: -$page-padding-horizontal-mob-landscape;
    }

    @include media-query(tablet-portrait) {
        margin-#{$location}: -$page-padding-horizontal-tablet-portrait;
    }

    @include media-query(tablet-landscape) {
        margin-#{$location}: -$page-padding-horizontal-tablet-landscape;
    }
}

@mixin page-child-negative-margin--vertical($location) {
    margin-#{$location}: -$page-padding-vertical-base;

    @include media-query(mob-landscape) {
        margin-#{$location}: -$page-padding-vertical-mob-landscape;
    }

    @include media-query(tablet-portrait) {
        margin-#{$location}: -$page-padding-vertical-tablet-portrait;
    }

    @include media-query(tablet-landscape) {
        margin-#{$location}: -$page-padding-vertical-tablet-landscape;
    }
}

@mixin section--page($style: null, $padding: normal) {
    width: 100%;
    position: relative;
    z-index: z($z-elements, page);

    @if $padding == large {
        padding-top: $page-padding-vertical-base + 10px;
        padding-bottom: $page-padding-vertical-base + 10px;
        padding-left: $page-padding-horizontal-base + 10px;
        padding-right: $page-padding-horizontal-base + 10px;

        @include media-query(mob-landscape) {
            padding-top: $page-padding-vertical-mob-landscape + 10px;
            padding-bottom: $page-padding-vertical-mob-landscape + 10px;
            padding-left: $page-padding-horizontal-mob-landscape + 10px;
            padding-right: $page-padding-horizontal-mob-landscape + 10px;
        }

        @include media-query(tablet-portrait) {
            padding-top: $page-padding-vertical-tablet-portrait + 10px;
            padding-bottom: $page-padding-vertical-tablet-portrait + 10px;
            padding-left: $page-padding-horizontal-tablet-portrait + 10px;
            padding-right: $page-padding-horizontal-tablet-portrait + 10px;
        }

        @include media-query(tablet-landscape) {
            padding-top: $page-padding-vertical-tablet-landscape;
            padding-bottom: $page-padding-vertical-tablet-landscape;
            padding-left: $page-padding-horizontal-tablet-landscape;
            padding-right: $page-padding-horizontal-tablet-landscape;
        }
    } @else {
        @include page-padding--vertical(top);
        @include page-padding--vertical(bottom);
        @include page-padding--horizontal(left);
        @include page-padding--horizontal(right);
    }

    @if $style == corners {
        @include media-query(tablet-landscape) {
            width: auto;
            padding: 0;
            margin: $gutter-xxl;
            min-height: $section-overlap;

            &.section--overlap {
                margin-top: $gutter-xxl - $section-overlap;
            }

            &.section--no-hero {
                margin-top: $gutter-xxl + $gutter-xxl;
            }
        }
    }
}

/* prettier-ignore */
@mixin section--after-page ($padding-vertical: (2 * $gutter-x-large), $padding: normal) {
    @if $padding == normal {
        @include media-query(tablet-landscape) {
            z-index: z($z-elements, page-behind);
            margin-top: -$section-overlap;
            padding-top: $section-overlap + $padding-vertical;
            padding-bottom: $padding-vertical;
        }
    } @else {
        @include media-query(tablet-landscape) {
            z-index: z($z-elements, page-behind);
            margin-top: -$section-overlap;
            padding-top: $padding-vertical;
            padding-bottom: $padding-vertical;
        }
    }
}

/* ============================================
    Basic page with transparent connectors
    Add the following include inside the element that gets this:
    {% include "patterns/atoms/corners/corners.html" with size="page" %}
*/

@mixin page($location-1: null, $location-2: null, $width: full) {
    @include section--page(corners);
    @include connectors--transparent(
        page,
        $location-1,
        $location-2,
        $white,
        $page-connectors-breakpoint
    );
    background-color: $white;

    @if $width == medium {
        @include media-query($page-connectors-breakpoint) {
            max-width: $wrapper--medium -
                (2 * $page-padding-horizontal-tablet-landscape);
        }
    }

    @if $width == small {
        @include media-query($page-connectors-breakpoint) {
            max-width: $wrapper--small -
                (2 * $page-padding-horizontal-tablet-landscape);
        }
    }
}

/* ============================================
    Remove margins on first and last children
*/

@mixin clear-child-margins($selector: '*') {
    > #{$selector}:first-child {
        margin-top: 0;
    }

    > #{$selector}:last-child {
        margin-bottom: 0;
    }
}

/* ============================================
    configure width based on body modifier
*/

@mixin width-from-modifier() {
    .template-with-sidebar & {
        max-width: 1060px;
    }

    .template-full-width & {
        max-width: 960px;
    }

    .template-full-width--wide & {
        max-width: 1060px;
    }
}

// hide elements from mobile screen readers when the mob menu is open
@mixin hide-when-mob-nav-open($behaviour: block) {
    .mob-nav-open & {
        display: none;

        @include media-query($menu-breakpoint) {
            display: $behaviour;
        }
    }
}
